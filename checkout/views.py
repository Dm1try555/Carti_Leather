from decimal import Decimal
import json
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.shortcuts import get_object_or_404, redirect, render
from django.http import JsonResponse
from django.urls import reverse
from django.views.decorators.csrf import csrf_exempt



import asyncio
import stripe
from telegram import Bot
from django.conf import settings

import requests
import telegram

from cart.views import Cart
from .forms import OrderCreateForm
from .models import Order, OrderItem, ShippingAddress


@login_required
def checkout(request):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
    """
    cart = Cart.objects.get(user=request.user)
    form = OrderCreateForm()
    context = {'cart': cart, 'form': form}
    return render(request, 'checkout/checkout.html', context)


@login_required
def thank_you(request, order_id):
    """
    –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ–¥—è–∫–∏ –ø—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
    """
    order = get_object_or_404(Order, id=order_id, user=request.user)
    return render(request, 'checkout/thank_you.html', {'order': order})

@login_required
def popup(request, order_id):
    order = get_object_or_404(Order, id=order_id, user=request.user)
    return render(request, 'checkout/popup.html', {'order': order})


@login_required
def create_order(request):
    cart = get_object_or_404(Cart, user=request.user)

    if request.method == 'POST' and cart.items.exists():
        form = OrderCreateForm(request.POST)
        if form.is_valid():
            order = Order.objects.create(
                payment_method=form.cleaned_data['payment_method'],
                user=request.user,
            )
            feedback_messengers = request.POST.getlist('feedback_messengers')
            ShippingAddress.objects.create(
                first_name=form.cleaned_data['first_name'],
                last_name=form.cleaned_data['last_name'],
                email=form.cleaned_data['email'],
                phone=form.cleaned_data['phone'],
                city=request.POST.get('city'),
                office=request.POST.get('office'),
                order=order,
                feedback_messengers=feedback_messengers,
            )

            for cart_item in cart.items.all():
                OrderItem.objects.create(
                    order=order,
                    item=cart_item.item,
                    quantity=cart_item.quantity,
                    price=cart_item.item.price
                )

            cart.clear()

            address = order.shipping_address
            items_text = "\n".join([
                f"{item.quantity} x {item.item.title} ‚Äî {item.total_price} –≥—Ä–Ω"
                for item in order.items.all()
            ])
            message = (
                f"üõí –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order.id}\n"
                f"üë§ –ö–ª—ñ—î–Ω—Ç: {address.first_name} {address.last_name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {address.phone}\n"
                f"üìß Email: {address.email}\n"
                f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {address.city}\n"
                f"üì¶ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {address.office}\n"
                f"üí≥ –û–ø–ª–∞—Ç–∞: {order.get_payment_method_display()}\n"
                f"üßæ –¢–æ–≤–∞—Ä–∏:\n{items_text}\n"
                f"üí∞ –°—É–º–∞: {order.total_price} –≥—Ä–Ω"
                f"\n\nüí¨ –ú–µ—Å–µ–Ω–¥–∂–µ—Ä–∏: {', '.join(feedback_messengers) if feedback_messengers else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            )
            asyncio.run(send_telegram_message(message))
            return redirect('checkout:popup', order_id=order.id)
    else:
        form = OrderCreateForm()  # <-- –¶–ï –í–ê–ñ–õ–ò–í–û! –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –¥–ª—è GET-–∑–∞–ø–∏—Ç—É

    messages.warning(request, '–§–æ—Ä–º–∞ –Ω–µ –±—É–ª–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
    context = {'form': form, 'cart': cart}
    return render(request, 'checkout/popup.html', context)


async def send_telegram_message(message):
    bot = telegram.Bot(token=settings.TELEGRAM_TOKEN)
    chat_id = settings.TELEGRAM_CHAT_ID
    await bot.send_message(chat_id=chat_id, text=message)


# def fake_payment(request):
#     if request.method == 'POST':
#         order = Order.objects.create(
#             user=request.user,
#             total_price=500,  # –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É
#             payment_status='Paid'
#         )
#         messages.success(request, '–û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞!')
#         return redirect('checkout:thank_you', order_id=order.id)
#     return render(request, 'checkout/thank_you.html')


# stripe.api_key = settings.STRIPE_SECRET_KEY
# stripe.api_version = settings.STRIPE_API_VERSION


# def payment_process(request):
#     order_id = request.session.get('order_id', None)
#     order = get_object_or_404(Order, id=order_id)
    
#     if request.method == 'POST':
#         success_url = request.build_absolute_uri(
#             reverse('checkout:thank_you')
#         )
#         cancel_url = request.build_absolute_uri(
#             reverse('payment:popup')
#         )
#         session_data = {
#             'mode': 'payment',
#             'client_reference_id': order.id,
#             'success_url': success_url,
#             'cancel_url': cancel_url,
#             'line_items': []
#         }
#         for item in order.items.all():
#             discounted_price = item.product.sell_price()
#             session_data['line_items'].append({
#                 'price_data': {
#                     'unit_amount': int(discounted_price * Decimal('100')),
#                     'currency': 'usd',
#                     'product_data': {
#                         'name': item.product.name,
#                     },
#                 },
#                 'quantity': item.quantity,
#             })
#         session = stripe.checkout.Session.create(**session_data)
#         return redirect(session.url, code=303)
#     else:
#         return render(request, 'payment/process.html', locals())
    

# def payment_completed(request):
#     return render(request, 'payment/completed.html')


# def payment_canceled(request):
#     return render(request, 'payment/canceled.html')



# def cities(request):
#     query = request.GET.get('q', '').strip()
#     print(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç: {query}")

#     if not query:
#         return JsonResponse({'cities': []})

#     url = "https://api.novaposhta.ua/v2.0/json/"
#     payload = {
#         "apiKey": settings.NOVAPOSHTA_API_KEY,
#         "modelName": "Address",
#         "calledMethod": "getCities",
#         "methodProperties": {
#             "FindByString": query
#         }
#     }

#     try:
#         response = requests.post(url, json=payload, timeout=5)  # <- –î–æ–¥–∞–Ω–æ timeout
#         response.raise_for_status()
#         cities = []
#         data = response.json()
#         if data.get('success'):
#             cities = [
#                 {'name': city['Description'], 'ref': city['Ref']}
#                 for city in data['data']
#             ]
#         else:
#             print(f"–ü–æ–º–∏–ª–∫–∞ API: {data.get('errors', '–Ω–µ–≤—ñ–¥–æ–º—ñ –ø–æ–º–∏–ª–∫–∏')}")
#     except requests.exceptions.ReadTimeout:
#         print("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ API –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏.")
#         cities = []
#     except requests.RequestException as e:
#         print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø–∏—Ç—É –¥–æ API: {e}")
#         cities = []

#     return JsonResponse({'cities': cities})



# def get_offices(request, city_ref):
#     url = 'https://api.novaposhta.ua/v2.0/json/'
#     payload = {
#         "apiKey": settings.NOVAPOSHTA_API_KEY,
#         "modelName": "Address",
#         "calledMethod": "getWarehouses",
#         "methodProperties": {
#             "CityRef": city_ref
#         }
#     }

#     try:
#         response = requests.post(url, json=payload, timeout=5)  # <- –î–æ–¥–∞–Ω–æ timeout
#         response.raise_for_status()
#         offices_data = response.json().get('data', [])
#         offices = [{'name': office['Description'], 'ref': office['Ref']} for office in offices_data]
#     except requests.exceptions.ReadTimeout:
#         print("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å.")
#         offices = []
#     except requests.RequestException as e:
#         print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤—ñ–¥–¥—ñ–ª–µ–Ω—å: {e}")
#         offices = []

#     return JsonResponse({'offices': offices})


# cities_data = []

# def update_cities_data():
#     global cities_data
#     url = 'https://api.novaposhta.ua/v2.0/json/'
#     payload = {
#         "apiKey": settings.NOVAPOSHTA_API_KEY,
#         "modelName": "Address",
#         "calledMethod": "getCities",
#         "methodProperties": {}
#     }
#     response = requests.post(url, json=payload)
#     cities_data = response.json().get('data', [])

# def get_city_name_by_ref(ref):
#     # –ø—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–ª–∏–∫—É –¥–æ API –ù–æ–≤–æ—ó –ø–æ—à—Ç–∏
#     response = requests.post("https://api.novaposhta.ua/v2.0/json/", json={
#         "apiKey": settings.NOVAPOSHTA_API_KEY,
#         "modelName": "Address",
#         "calledMethod": "getCities",
#         "methodProperties": {
#             "Ref": ref
#         }
#     })
#     data = response.json()
#     return data['data'][0]['Description'] if data.get('data') else '–ù–µ–≤—ñ–¥–æ–º–æ'


