from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.shortcuts import get_object_or_404, redirect, render
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt

import asyncio
from telegram import Bot
from django.conf import settings

import requests
import telegram

from cart.views import Cart
from .forms import OrderCreateForm
from .models import Order, OrderItem, ShippingAddress


@login_required
def checkout(request):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
    """
    cart = Cart.objects.get(user=request.user)
    form = OrderCreateForm()
    context = {'cart': cart, 'form': form}
    return render(request, 'checkout/checkout.html', context)


@login_required
def thank_you(request, order_id):
    """
    –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ–¥—è–∫–∏ –ø—ñ—Å–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
    """
    order = get_object_or_404(Order, id=order_id, user=request.user)
    return render(request, 'checkout/thank_you.html', {'order': order})


@login_required
def create_order(request):
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –∞–¥—Ä–µ—Å–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.
    """
    cart = get_object_or_404(Cart, user=request.user)

    if cart.items.exists() and request.method == 'POST':
        form = OrderCreateForm(request.POST)
        if form.is_valid():
            order = Order.objects.create(
                payment_method=form.cleaned_data['payment_method'],
                user=request.user,
            )
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –º–µ—Å–µ–Ω–¥–∂–µ—Ä—ñ–≤ –∑ —Ñ–æ—Ä–º–∏
            feedback_messengers = form.cleaned_data.get('feedback_messengers', [])

            ShippingAddress.objects.create(
                first_name=form.cleaned_data['first_name'],
                last_name=form.cleaned_data['last_name'],
                email=form.cleaned_data['email'],
                phone=form.cleaned_data['phone'],
                city_ref = request.POST.get('city'),
                warehouse_ref = request.POST.get('address_line_1'),
                order=order,
                feedback_messengers=feedback_messengers,
            )

            for cart_item in cart.items.all():
                OrderItem.objects.create(
                    order=order,
                    item=cart_item.item,
                    quantity=cart_item.quantity,
                    price=cart_item.item.price
                )

            cart.clear()
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            address = order.shipping_address
            items_text = "\n".join([
                f"{item.quantity} x {item.item.title} ‚Äî {item.total_price} –≥—Ä–Ω"
                for item in order.items.all()
            ])
            message = (
                f"üõí –ù–û–í–ï –ó–ê–ú–û–í–õ–ï–ù–ù–Ø #{order.id}\n"
                f"üë§ –ö–ª—ñ—î–Ω—Ç: {address.first_name} {address.last_name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {address.phone}\n"
                f"üìß Email: {address.email}\n"
                f"üèôÔ∏è –ú—ñ—Å—Ç–æ: {get_city_name_by_ref(address.city_ref)}\n"  # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞
                f"üì¶ –í—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è: {address.warehouse_ref}\n"
                f"üí≥ –û–ø–ª–∞—Ç–∞: {order.get_payment_method_display()}\n"
                f"üßæ –¢–æ–≤–∞—Ä–∏:\n{items_text}\n"
                f"üí∞ –°—É–º–∞: {order.total_price} –≥—Ä–Ω"
                f"\n\nüí¨ –ú–µ—Å–µ–Ω–¥–∂–µ—Ä–∏: {', '.join(feedback_messengers) if feedback_messengers else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            )


            # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram
            asyncio.run(send_telegram_message(message))
            return redirect('checkout:thank_you', order_id=order.id)
    else:
        form = OrderCreateForm()

    messages.warning(request, '–§–æ—Ä–º–∞ –Ω–µ –±—É–ª–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')
    context = {'form': form, 'cart': cart}
    return render(request, 'checkout/create_order.html', context)



def get_cities(request):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º—ñ—Å—Ç –∑ API –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏.
    """
    url = 'https://api.novaposhta.ua/v2.0/json/'
    payload = {
        "apiKey": 'c4357f4a435f6a68cea55f2c278a434a',
        "modelName": "Address",
        "calledMethod": "getCities",
        "methodProperties": {}
    }

    response = requests.post(url, json=payload)
    cities_data = response.json().get('data', [])
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ñ –º—ñ—Å—Ç–∞
    popular_cities = ['–ö–∏—ó–≤', '–õ—å–≤—ñ–≤', '–û–¥–µ—Å–∞', '–•–∞—Ä–∫—ñ–≤', '–î–Ω—ñ–ø—Ä–æ', '–ó–∞–ø–æ—Ä—ñ–∂–∂—è', '–ú–∏–∫–æ–ª–∞—ó–≤']  # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –º—ñ—Å—Ç

    # –†–æ–∑–¥—ñ–ª—è—î–º–æ –º—ñ—Å—Ç–∞ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ñ —Ç–∞ —ñ–Ω—à—ñ
    popular = [
        {'name': city['Description'], 'ref': city['Ref']}
        for city in cities_data
        if city['Description'] in popular_cities
    ]
    other = [
        {'name': city['Description'], 'ref': city['Ref']}
        for city in cities_data
        if city['Description'] not in popular_cities
    ]
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É –ø–æ–ø—É–ª—è—Ä–Ω—ñ –º—ñ—Å—Ç–∞, –ø–æ—Ç—ñ–º —Ä–µ—à—Ç—É
    cities = popular + other

    return JsonResponse({'cities': cities})


def get_offices(request, city_ref):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—ñ–¥–¥—ñ–ª–µ–Ω—å –∑–∞ –º—ñ—Å—Ç–æ–º.
    """
    url = 'https://api.novaposhta.ua/v2.0/json/'
    payload = {
        "apiKey": 'c4357f4a435f6a68cea55f2c278a434a',
        "modelName": "Address",
        "calledMethod": "getWarehouses",
        "methodProperties": {
            "CityRef": city_ref
        }
    }

    response = requests.post(url, json=payload)
    offices_data = response.json().get('data', [])
    offices = [{'name': office['Description'], 'ref': office['Ref']} for office in offices_data]

    return JsonResponse({'offices': offices})

cities_data = []

def update_cities_data():
    global cities_data
    url = 'https://api.novaposhta.ua/v2.0/json/'
    payload = {
        "apiKey": 'c4357f4a435f6a68cea55f2c278a434a',
        "modelName": "Address",
        "calledMethod": "getCities",
        "methodProperties": {}
    }
    response = requests.post(url, json=payload)
    cities_data = response.json().get('data', [])

def get_city_name_by_ref(city_ref):
    """
    –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –∑–∞ –π–æ–≥–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–º –∑ –∫–µ—à–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö.
    """
    if not cities_data:
        update_cities_data()  # –Ø–∫—â–æ –¥–∞–Ω—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ, –æ–Ω–æ–≤–ª—é—î–º–æ —ó—Ö

    for city in cities_data:
        if city['Ref'] == city_ref:
            return city['Description']  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞
    return "–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ"  # –Ø–∫—â–æ –º—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ



async def send_telegram_message(message):
    bot = telegram.Bot(token=settings.TELEGRAM_TOKEN)
    chat_id = settings.TELEGRAM_CHAT_ID
    await bot.send_message(chat_id=chat_id, text=message)
